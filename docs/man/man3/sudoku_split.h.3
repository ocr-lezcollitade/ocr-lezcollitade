.TH "src/preproc/sudoku_detection/sudoku_split.h" 3 "Fri Nov 11 2022" "OCR-Lezcollitade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/preproc/sudoku_detection/sudoku_split.h
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsudoku_split\fP (char *black_white, char *grayscale, char *path)"
.br
.ti -1c
.RI "SDL_Surface * \fBscale_down\fP (SDL_Surface *surface, size_t w, size_t h, size_t new_w, size_t new_h)"
.br
.RI "scales down a surface "
.ti -1c
.RI "ssize_t \fBget_rotation\fP (SDL_Surface *surface)"
.br
.RI "finds the angle the image has to be rotated with to be straight "
.in -1c
.SH "Function Documentation"
.PP 
.SS "ssize_t get_rotation (SDL_Surface * surface)"

.PP
finds the angle the image has to be rotated with to be straight 
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the surface we went the rotation of 
.RE
.PP
\fBReturns\fP
.RS 4
the angle the image has to be rotated with to be straight if it is found, -1 if not 
.RE
.PP

.PP
Definition at line 703 of file sudoku_split\&.c\&.
.PP
.nf
704 {
705     ssize_t theta = line_detection(surface, surface, 1);
706     if (theta < 0)
707         return -1;
708     return theta;
709 }
.fi
.SS "SDL_Surface* scale_down (SDL_Surface * surface, size_t w, size_t h, size_t new_w, size_t new_h)"

.PP
scales down a surface 
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the surface we want to scale down 
.br
\fIw,h\fP the width and height of the original surface 
.br
\fInew_w,new_h\fP the width and height of the surface we want 
.RE
.PP

.PP
Definition at line 249 of file sudoku_split\&.c\&.
.PP
.nf
251 {
252     SDL_Surface *output
253         = SDL_CreateRGBSurface(0, (int)new_w, (int)new_h, 32, 0, 0, 0, 0);
254 
255     SDL_PixelFormat *format = surface->format;
256     SDL_PixelFormat *format_output = output->format;
257 
258     Uint32 *pixels = surface->pixels;
259     Uint32 *pixels_output = output->pixels;
260 
261     double ratio_h = ((double)h / new_h);
262     double ratio_w = ((double)w / new_w);
263 
264     for (size_t j = 0; j < new_h; j++)
265         for (size_t i = 0; i < new_w; i++)
266         {
267             int r, g, b;
268             average(i, j, ratio_h, ratio_w, w, format, pixels, &r, &g, &b);
269             pixels_output[j * new_w + i] = SDL_MapRGB(format_output, r, g, b);
270         }
271 
272     return output;
273 }
.fi
.SS "int sudoku_split (char * black_white, char * grayscale, char * path)"

.PP
Definition at line 677 of file sudoku_split\&.c\&.
.PP
.nf
678 {
679     // Initializes the SDL\&.
680     if (SDL_Init(SDL_INIT_VIDEO) != 0)
681         return -1; // errx(EXIT_FAILURE, "%s", SDL_GetError());
682 
683     SDL_Surface *b_w = load_image(black_white);
684     if (b_w == NULL)
685         return -1;
686     SDL_Surface *gray = load_image(grayscale);
687     if (gray == NULL)
688         return -1;
689 
690     strcpy(save_path, path);
691 
692     int value = (int)line_detection(b_w, gray, 0);
693 
694     SDL_FreeSurface(b_w);
695     SDL_FreeSurface(gray);
696 
697     SDL_Quit();
698     if (value == -2)
699         return -1;
700     return 0;
701 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for OCR-Lezcollitade from the source code\&.
