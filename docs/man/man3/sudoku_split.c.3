.TH "src/preproc/sudoku_detection/sudoku_split.c" 3 "Tue Nov 22 2022" "OCR-Lezcollitade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/preproc/sudoku_detection/sudoku_split.c
.SH SYNOPSIS
.br
.PP
\fC#include <SDL2/SDL\&.h>\fP
.br
\fC#include <SDL2/SDL_image\&.h>\fP
.br
\fC#include <err\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include 'sudoku_split\&.h'\fP
.br
\fC#include '\&.\&./\&.\&./utils/matrices/matrix\&.h'\fP
.br
\fC#include '\&.\&./color_removal/color_removal\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUNUSED\fP(x)   (void)(x)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBscale_down\fP (SDL_Surface **surface_p, size_t w, size_t h, size_t new_w, size_t new_h)"
.br
.ti -1c
.RI "int \fBsudoku_split\fP (char *black_white, char *grayscale, char *path)"
.br
.ti -1c
.RI "int \fBget_rotation\fP (SDL_Surface *surface)"
.br
.RI "finds the angle the image has to be rotated with to be straight "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define UNUSED(x)   (void)(x)"

.PP
Definition at line \fB8\fP of file \fBsudoku_split\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "ssize_t get_rotation (SDL_Surface * surface)"

.PP
finds the angle the image has to be rotated with to be straight 
.PP
\fBParameters\fP
.RS 4
\fIsurface\fP the surface we went the rotation of 
.RE
.PP
\fBReturns\fP
.RS 4
the angle the image has to be rotated with to be straight if it is found, -1 if not 
.RE
.PP

.PP
Definition at line \fB713\fP of file \fBsudoku_split\&.c\fP\&.
.PP
.nf
714 {
715     char save_path[30] = {0};
716     int theta = line_detection(surface, surface, 1, save_path);
717     if (theta < 0)
718         return -1;
719     return theta;
720 }
.fi
.SS "void scale_down (SDL_Surface ** surface_p, size_t w, size_t h, size_t new_w, size_t new_h)"

.PP
Definition at line \fB247\fP of file \fBsudoku_split\&.c\fP\&.
.PP
.nf
249 {
250     SDL_Surface *surface = *surface_p;
251     SDL_Surface *output
252         = SDL_CreateRGBSurface(0, (int)new_w, (int)new_h, 32, 0, 0, 0, 0);
253 
254     SDL_PixelFormat *format = surface->format;
255     SDL_PixelFormat *format_output = output->format;
256 
257     Uint32 *pixels = surface->pixels;
258     Uint32 *pixels_output = output->pixels;
259 
260     double ratio_h = ((double)h / new_h);
261     double ratio_w = ((double)w / new_w);
262 
263     for (size_t j = 0; j < new_h; j++)
264         for (size_t i = 0; i < new_w; i++)
265         {
266             int r, g, b;
267             average(i, j, ratio_h, ratio_w, w, format, pixels, &r, &g, &b);
268             pixels_output[j * new_w + i] = SDL_MapRGB(format_output, r, g, b);
269         }
270 
271     SDL_FreeSurface(*surface_p);
272     *surface_p = output;
273 }
.fi
.SS "int sudoku_split (char * black_white, char * grayscale, char * path)"

.PP
Definition at line \fB686\fP of file \fBsudoku_split\&.c\fP\&.
.PP
.nf
687 {
688     // Initializes the SDL\&.
689     if (SDL_Init(SDL_INIT_VIDEO) != 0)
690         return 1; // errx(EXIT_FAILURE, "%s", SDL_GetError());
691 
692     SDL_Surface *b_w = load_image(black_white);
693     if (b_w == NULL)
694         return 1;
695     SDL_Surface *gray = load_image(grayscale);
696     if (gray == NULL)
697         return 1;
698 
699     char save_path[30];
700     strcpy(save_path, path);
701 
702     int value = line_detection(b_w, gray, 0, save_path);
703 
704     SDL_FreeSurface(b_w);
705     SDL_FreeSurface(gray);
706 
707     SDL_Quit();
708     if (value == -2)
709         return 1;
710     return 0;
711 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for OCR-Lezcollitade from the source code\&.
