.TH "src/cli/parser.h" 3 "Sat Oct 29 2022" "OCR-Lezcollitade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/cli/parser.h
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBINPUT_NETWORK\fP   0"
.br
.ti -1c
.RI "#define \fBDATA\fP   \fBINPUT_NETWORK\fP + 1"
.br
.ti -1c
.RI "#define \fBFORMAT\fP   \fBDATA\fP + 1"
.br
.ti -1c
.RI "#define \fBGENERATE\fP   \fBFORMAT\fP + 1"
.br
.ti -1c
.RI "#define \fBOUTPUT_NETWORK\fP   \fBGENERATE\fP + 1"
.br
.ti -1c
.RI "#define \fBRATE\fP   \fBOUTPUT_NETWORK\fP + 1"
.br
.ti -1c
.RI "#define \fBITERATIONS\fP   \fBRATE\fP + 1"
.br
.ti -1c
.RI "#define \fBSTART\fP   \fBITERATIONS\fP + 1"
.br
.ti -1c
.RI "#define \fBLENGTH\fP   \fBSTART\fP + 1"
.br
.ti -1c
.RI "#define \fBOUTPUT_ACTIVATION\fP   \fBLENGTH\fP + 1"
.br
.ti -1c
.RI "#define \fBACTIVATION\fP   \fBOUTPUT_ACTIVATION\fP + 1"
.br
.ti -1c
.RI "#define \fBVERBOSE\fP   \fBACTIVATION\fP + 1"
.br
.ti -1c
.RI "#define \fBTRAIN_PARAMETER_SIZE\fP   \fBVERBOSE\fP + 1"
.br
.ti -1c
.RI "#define \fBTRAIN_MODE\fP   0"
.br
.ti -1c
.RI "#define \fBTEST_MODE\fP   1"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef char ** \fBparams_t\fP"
.br
.RI "A hash table of params\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBparams_t\fP \fBparse_train_params\fP (int argc, char **argv)"
.br
.RI "Parses the train parameters\&. "
.ti -1c
.RI "\fBparams_t\fP \fBparse_test_params\fP (int argc, char **argv)"
.br
.RI "Parses the test parameters\&. "
.ti -1c
.RI "\fBparams_t\fP \fBparse_params\fP (int argc, char **argv, char *mode)"
.br
.RI "Parses all the params\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ACTIVATION   \fBOUTPUT_ACTIVATION\fP + 1"

.PP
Definition at line \fB14\fP of file \fBparser\&.h\fP\&.
.SS "#define DATA   \fBINPUT_NETWORK\fP + 1"

.PP
Definition at line \fB5\fP of file \fBparser\&.h\fP\&.
.SS "#define FORMAT   \fBDATA\fP + 1"

.PP
Definition at line \fB6\fP of file \fBparser\&.h\fP\&.
.SS "#define GENERATE   \fBFORMAT\fP + 1"

.PP
Definition at line \fB7\fP of file \fBparser\&.h\fP\&.
.SS "#define INPUT_NETWORK   0"

.PP
Definition at line \fB4\fP of file \fBparser\&.h\fP\&.
.SS "#define ITERATIONS   \fBRATE\fP + 1"

.PP
Definition at line \fB10\fP of file \fBparser\&.h\fP\&.
.SS "#define LENGTH   \fBSTART\fP + 1"

.PP
Definition at line \fB12\fP of file \fBparser\&.h\fP\&.
.SS "#define OUTPUT_ACTIVATION   \fBLENGTH\fP + 1"

.PP
Definition at line \fB13\fP of file \fBparser\&.h\fP\&.
.SS "#define OUTPUT_NETWORK   \fBGENERATE\fP + 1"

.PP
Definition at line \fB8\fP of file \fBparser\&.h\fP\&.
.SS "#define RATE   \fBOUTPUT_NETWORK\fP + 1"

.PP
Definition at line \fB9\fP of file \fBparser\&.h\fP\&.
.SS "#define START   \fBITERATIONS\fP + 1"

.PP
Definition at line \fB11\fP of file \fBparser\&.h\fP\&.
.SS "#define TEST_MODE   1"

.PP
Definition at line \fB43\fP of file \fBparser\&.h\fP\&.
.SS "#define TRAIN_MODE   0"

.PP
Definition at line \fB42\fP of file \fBparser\&.h\fP\&.
.SS "#define TRAIN_PARAMETER_SIZE   \fBVERBOSE\fP + 1"

.PP
Definition at line \fB17\fP of file \fBparser\&.h\fP\&.
.SS "#define VERBOSE   \fBACTIVATION\fP + 1"

.PP
Definition at line \fB15\fP of file \fBparser\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef char** \fBparams_t\fP"

.PP
A hash table of params\&. 
.PP
Definition at line \fB22\fP of file \fBparser\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBparams_t\fP parse_params (int argc, char ** argv, char * mode)"

.PP
Parses all the params\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP The number of strings in the argv array\&. 
.br
\fIargv\fP The array of param strings\&. 
.br
\fImode\fP The mode: either TRAIN_MODE or RUN_MODE\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The hash table of params\&. 
.RE
.PP

.PP
Definition at line \fB113\fP of file \fBparser\&.c\fP\&.
.PP
.nf
114 {
115     if (argc < 2)
116     {
117         return NULL;
118     }
119 
120     params_t res = NULL;
121     char *subcommand = argv[1];
122     if (strcmp(subcommand, "train") == 0)
123     {
124         *mode = TRAIN_MODE;
125         res = parse_train_params(argc - 2, argv + 2);
126     }
127     else if (strcmp(subcommand, "test") == 0)
128     {
129         *mode = TEST_MODE;
130         res = parse_test_params(argc - 2, argv + 2);
131     }
132     return res;
133 }
.fi
.SS "\fBparams_t\fP parse_test_params (int argc, char ** argv)"

.PP
Parses the test parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP The number of arguments in the array\&. 
.br
\fIargv\fP The array of parameters\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The parameters hash table\&. 
.RE
.PP

.PP
Definition at line \fB105\fP of file \fBparser\&.c\fP\&.
.PP
.nf
106 {
107 
108     params_t params = _parse_params(argc, argv);
109     // TODO : check parameters validity
110     return params;
111 }
.fi
.SS "\fBparams_t\fP parse_train_params (int argc, char ** argv)"

.PP
Parses the train parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP The number of strings in the argv array\&. 
.br
\fIargv\fP The list of strings\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The hash table of params\&. 
.RE
.PP

.PP
Definition at line \fB98\fP of file \fBparser\&.c\fP\&.
.PP
.nf
99 {
100     params_t params = _parse_params(argc, argv);
101     // TODO : check parameters validity
102     return params;
103 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for OCR-Lezcollitade from the source code\&.
