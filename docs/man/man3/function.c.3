.TH "src/network/function.c" 3 "Sat Oct 29 2022" "OCR-Lezcollitade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/network/function.c
.SH SYNOPSIS
.br
.PP
\fC#include <math\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'function\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUNUSED\fP(x)   (void)(x)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBlayer_activation_t\fP \fBget_layer_activation\fP (const char *name)"
.br
.ti -1c
.RI "double \fBcost\fP (\fBmatrix_t\fP *target, \fBmatrix_t\fP *output)"
.br
.ti -1c
.RI "double \fBcost_derivative\fP (double target, double output)"
.br
.ti -1c
.RI "double \fBnb_m1_and_1\fP ()"
.br
.ti -1c
.RI "int \fBindex_random\fP (int count)"
.br
.ti -1c
.RI "double \fBnormal\fP (double z)"
.br
.RI "Returns a number following the standard normal distribution;\&. "
.ti -1c
.RI "double \fBsign\fP (double nb)"
.br
.RI "Returns 1 if the double is positive, -1 otherwise;\&. "
.ti -1c
.RI "double * \fBgenerate_weights\fP (double n)"
.br
.RI "Returns a double pointer with values following normal distribution; of element for the distribution\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBlayer_activation_t\fP \fBactivations\fP []"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define UNUSED(x)   (void)(x)"

.PP
Definition at line 6 of file function\&.c\&.
.SH "Function Documentation"
.PP 
.SS "double cost (\fBmatrix_t\fP * target, \fBmatrix_t\fP * output)"

.PP
Definition at line 89 of file function\&.c\&.
.PP
.nf
90 {
91     double res = 0;
92     for (size_t i = 0; i < target->rows; i++)
93     {
94         res += pow(mat_el_at(target, i, 0) - mat_el_at(output, i, 0), 2);
95     }
96 
97     return res / 2;
98 }
.fi
.SS "double cost_derivative (double target, double output)"

.PP
Definition at line 100 of file function\&.c\&.
.PP
.nf
101 {
102     return output - target;
103 }
.fi
.SS "double * generate_weights (double n)"

.PP
Returns a double pointer with values following normal distribution; of element for the distribution\&. 
.PP
\fBReturns\fP
.RS 4
a double pointer with values following normal distribution; 
.RE
.PP

.PP
Definition at line 127 of file function\&.c\&.
.PP
.nf
128 {
129     size_t index = 0;
130     double *values = (double *)malloc(sizeof(double) * n);
131     for (int i = -n / 2; i < n / 2; i++)
132     {
133         double nb = normal(nb_m1_and_1() * 2) * sign(i);
134         values[index] = nb;
135         index++;
136     }
137 
138     // SHUFFLE
139 
140     for (int i = 0; i < 100; i++)
141     {
142         int i1 = index_random(n);
143         int i2 = index_random(n);
144         double temp = values[i1];
145         values[i1] = values[i2];
146         values[i2] = temp;
147     }
148     return values;
149 }
.fi
.SS "\fBlayer_activation_t\fP get_layer_activation (const char * name)"

.PP
Definition at line 74 of file function\&.c\&.
.PP
.nf
75 {
76     if (name == NULL)
77         return activations[0];
78     size_t len = sizeof(activations) / sizeof(layer_activation_t);
79     for (size_t i = 0; i < len; i++)
80     {
81         if (strcmp(activations[i]\&.name, name) == 0)
82         {
83             return activations[i];
84         }
85     }
86     return activations[0];
87 }
.fi
.SS "int index_random (int count)"

.PP
Definition at line 110 of file function\&.c\&.
.PP
.nf
111 {
112     return (int)((((double)rand() / (double)(unsigned)RAND_MAX + 1))
113                  * (double)count)
114            - count;
115 }
.fi
.SS "double nb_m1_and_1 ()"

.PP
Definition at line 105 of file function\&.c\&.
.PP
.nf
106 {
107     return ((double)rand() / (double)((unsigned)RAND_MAX + 1)) * 2 - 1;
108 }
.fi
.SS "double normal (double z)"

.PP
Returns a number following the standard normal distribution;\&. 
.PP
\fBParameters\fP
.RS 4
\fIz\fP The argument for the standard normal distribution 
.RE
.PP
\fBReturns\fP
.RS 4
The number following the standard normal distribution 
.RE
.PP

.PP
Definition at line 117 of file function\&.c\&.
.PP
.nf
118 {
119     return exp(-(z * z) / 2) / sqrt(2 * M_PI);
120 }
.fi
.SS "double sign (double nb)"

.PP
Returns 1 if the double is positive, -1 otherwise;\&. 
.PP
\fBParameters\fP
.RS 4
\fInb\fP A double number 
.RE
.PP
\fBReturns\fP
.RS 4
Returns 1 if the double is positive, -1 otherwise; 
.RE
.PP

.PP
Definition at line 122 of file function\&.c\&.
.PP
.nf
123 {
124     return (nb > 0 ? 1 : -1);
125 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBlayer_activation_t\fP activations[]"
\fBInitial value:\fP
.PP
.nf
= {{sigmoid, sigmoid_derivative, "sigmoid"},
    {soft_max, soft_max_derivative, "softmax"}}
.fi
.PP
Definition at line 71 of file function\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OCR-Lezcollitade from the source code\&.
